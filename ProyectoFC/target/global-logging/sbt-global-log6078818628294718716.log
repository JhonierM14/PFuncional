[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\JUANJO~1\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\JUANJO~1\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.10.5 (Oracle Corporation Java 17.0.10)
[debug] Load.defaultLoad until apply took 91.999ms
[debug]           Load.loadUnit: plugins took 66.2251ms
[debug]           Load.loadUnit: defsScala took 0.1675ms
[debug] [Loading] Scanning directory C:\Users\Juan Jose\IdeaProjects\ProyectoFC\project
[debug]             Load.loadUnit: mkEval took 4.3863ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Juan Jose\IdeaProjects\ProyectoFC\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 10.8592 ms
[info] loading settings for project proyectofc-build from idea.sbt ...
[debug]               Load.resolveProject(proyectofc-build) took 25.9842ms
[debug]             Load.loadTransitive: finalizeProject(Project(id proyectofc-build, base: C:\Users\Juan Jose\IdeaProjects\ProyectoFC\project, plugins: List(<none>))) took 51.1923ms
[debug] [Loading] Done in C:\Users\Juan Jose\IdeaProjects\ProyectoFC\project, returning: (proyectofc-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 325.3067ms
[debug]           Load.loadUnit: cleanEvalClasses took 5.3244ms
[debug]         Load.loadUnit(file:/C:/Users/Juan%20Jose/IdeaProjects/ProyectoFC/project/, ...) took 401.0535ms
[debug]       Load.apply: load took 483.8355ms
[debug]       Load.apply: resolveProjects took 3.1591ms
[debug]       Load.apply: finalTransforms took 41.6046ms
[debug]       Load.apply: config.delegates took 4.7033ms
[debug]       Load.apply: Def.make(settings)... took 251.6142ms
[debug]       Load.apply: structureIndex took 73.0652ms
[debug]       Load.apply: mkStreams took 1.378ms
[info] loading project definition from C:\Users\Juan Jose\IdeaProjects\ProyectoFC\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 2151.9661ms
[debug]     Load.loadUnit: defsScala took 0.0037ms
[debug] [Loading] Scanning directory C:\Users\Juan Jose\IdeaProjects\ProyectoFC
[debug]       Load.loadUnit: mkEval took 0.4707ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.8044 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 32.9694ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\Juan Jose\IdeaProjects\ProyectoFC, plugins: List(<none>))) took 36.0025ms
[debug] [Loading] Done in C:\Users\Juan Jose\IdeaProjects\ProyectoFC, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 2492.8613ms
[debug]     Load.loadUnit: cleanEvalClasses took 23.2073ms
[debug]   Load.loadUnit(file:/C:/Users/Juan%20Jose/IdeaProjects/ProyectoFC/, ...) took 4669.3779ms
[debug] Load.apply: load took 4682.8496ms
[debug] Load.apply: resolveProjects took 0.0956ms
[debug] Load.apply: finalTransforms took 21.2198ms
[debug] Load.apply: config.delegates took 0.3118ms
[debug] Load.apply: Def.make(settings)... took 53.8242ms
[debug] Load.apply: structureIndex took 19.3527ms
[debug] Load.apply: mkStreams took 0.0022ms
[info] set current project to ProyectoFC (in build file:/C:/Users/Juan%20Jose/IdeaProjects/ProyectoFC/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 49893 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 49893, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to ProyectoFC (in build file:/C:/Users/Juan%20Jose/IdeaProjects/ProyectoFC/)
[debug] > Exec(idea-shell, None, None)
